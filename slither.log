'npx truffle compile --all' running (use --truffle-version truffle@x.x.x to use specific version)

Compiling your contracts...
===========================
> Compiling ./contracts/Actors/Cluster.sol
> Compiling ./contracts/Actors/ClusterDefault.sol
> Compiling ./contracts/Actors/ClusterRegistry.sol
> Compiling ./contracts/Actors/Producer.sol
> Compiling ./contracts/Actors/Proxies/ClusterDefaultProxy.sol
> Compiling ./contracts/Actors/Proxies/ClusterProxy.sol
> Compiling ./contracts/Actors/Proxies/ClusterRegistryProxy.sol
> Compiling ./contracts/Actors/Proxies/ProducerProxy.sol
> Compiling ./contracts/Actors/Proxies/ReceiverProxy.sol
> Compiling ./contracts/Actors/Proxies/RelayerProxy.sol
> Compiling ./contracts/Actors/Receiver.sol
> Compiling ./contracts/Actors/Relayer.sol
> Compiling ./contracts/Fund/FundManager.sol
> Compiling ./contracts/Fund/Pot.sol
> Compiling ./contracts/Fund/Proxies/FundManagerProxy.sol
> Compiling ./contracts/Fund/Proxies/PotProxy.sol
> Compiling ./contracts/LGT/Curve.sol
> Compiling ./contracts/LGT/LGTProxy.sol
> Compiling ./contracts/LGT/LGTToken.sol
> Compiling ./contracts/LGT/Mintable.sol
> Compiling ./contracts/LGT/VoteDelegate.sol
> Compiling ./contracts/Migrations.sol
> Compiling ./contracts/Ticket/LuckManager.sol
> Compiling ./contracts/Ticket/Proxies/LuckManagerProxy.sol
> Compiling ./contracts/Ticket/Proxies/Verifier_NetworkRewardProxy.sol
> Compiling ./contracts/Ticket/Proxies/Verifier_ProducerProxy.sol
> Compiling ./contracts/Ticket/Proxies/Verifier_ReceiverProxy.sol
> Compiling ./contracts/Ticket/Verifier_NetworkReward.sol
> Compiling ./contracts/Ticket/Verifier_Producer.sol
> Compiling ./contracts/Ticket/Verifier_Receiver.sol
> Compiling ./contracts/Token/TokenLogic.sol
> Compiling ./contracts/Token/TokenProxy.sol
> Compiling ./contracts/governance/Comp.sol
> Compiling ./contracts/governance/GovernorAlpha.sol
> Compiling ./contracts/governance/SafeMath.sol
> Compiling ./contracts/governance/Timelock.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol
> Compiling @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol
> Compiling @openzeppelin/upgrades/contracts/Initializable.sol
> Compilation warnings encountered:

    /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Fund/FundManager.sol:4:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Ticket/LuckManager.sol:4:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Ticket/Verifier_Producer.sol:4:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Ticket/Verifier_Receiver.sol:4:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/governance/Comp.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/governance/GovernorAlpha.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^

> Artifacts written to /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/build/contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang


- Fetching solc version list from solc-bin. Attempt #1

> Duplicate contract names found for SafeMath.
> This can cause errors and unknown behavior. Please rename one of your contracts.

INFO:Detectors:[91m
GovernorAlpha.execute(uint256) (governance/GovernorAlpha.sol#192-200) sends eth to arbitrary user
	Dangerous calls:
	- timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (governance/GovernorAlpha.sol#197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
ERC20Burnable.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#30) shadows:
	- ERC20.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#232)
	- Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61)
ERC20Mintable.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol#30) shadows:
	- MinterRole.______gap (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#49)
	- ERC20.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#232)
	- Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61)
MinterRole.______gap (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#49) shadows:
	- Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61)
ERC20Detailed.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#56) shadows:
	- Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61)
ERC20.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#232) shadows:
	- Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing[0m
INFO:Detectors:[91m
ClusterRegistry.GovernanceEnforcerProxy (Actors/ClusterRegistry.sol#16) is never initialized. It is used in:
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables[0m
INFO:Detectors:[93m
Pot.claimFeeReward(bytes32,uint256[]) (Fund/Pot.sol#205-239) performs a multiplication on the result of a division:
	-allocatedValue = potByEpoch[_epochsToClaim[i]].value[memTokenList[j]].mul(rolePotAllocation).div(100) (Fund/Pot.sol#219-221)
	-claimAmount = allocatedValue.mul(noOfClaims).div(potByEpoch[_epochsToClaim[i]].claimsRemaining[_role]) (Fund/Pot.sol#222-224)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
Comp._writeCheckpoint(address,uint32,uint96,uint96) (governance/Comp.sol#262-273) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (governance/Comp.sol#265)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract ProducerProxy (Actors/Proxies/ProducerProxy.sol#8-80) has payable functions:
	 - ProducerProxy.fallback() (Actors/Proxies/ProducerProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract LuckManagerProxy (Ticket/Proxies/LuckManagerProxy.sol#8-80) has payable functions:
	 - LuckManagerProxy.fallback() (Ticket/Proxies/LuckManagerProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract ReceiverProxy (Actors/Proxies/ReceiverProxy.sol#8-80) has payable functions:
	 - ReceiverProxy.fallback() (Actors/Proxies/ReceiverProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract ClusterDefaultProxy (Actors/Proxies/ClusterDefaultProxy.sol#8-80) has payable functions:
	 - ClusterDefaultProxy.fallback() (Actors/Proxies/ClusterDefaultProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract RelayerProxy (Actors/Proxies/RelayerProxy.sol#8-80) has payable functions:
	 - RelayerProxy.fallback() (Actors/Proxies/RelayerProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract Verifier_ProducerProxy (Ticket/Proxies/Verifier_ProducerProxy.sol#8-80) has payable functions:
	 - Verifier_ProducerProxy.fallback() (Ticket/Proxies/Verifier_ProducerProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract PotProxy (Fund/Proxies/PotProxy.sol#8-80) has payable functions:
	 - PotProxy.fallback() (Fund/Proxies/PotProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract ClusterProxy (Actors/Proxies/ClusterProxy.sol#8-80) has payable functions:
	 - ClusterProxy.fallback() (Actors/Proxies/ClusterProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract FundManagerProxy (Fund/Proxies/FundManagerProxy.sol#8-80) has payable functions:
	 - FundManagerProxy.fallback() (Fund/Proxies/FundManagerProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract Verifer_NetworkRewardProxy (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#8-80) has payable functions:
	 - Verifer_NetworkRewardProxy.fallback() (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract ClusterRegistryProxy (Actors/Proxies/ClusterRegistryProxy.sol#8-80) has payable functions:
	 - ClusterRegistryProxy.fallback() (Actors/Proxies/ClusterRegistryProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract TokenProxy (Token/TokenProxy.sol#8-80) has payable functions:
	 - TokenProxy.fallback() (Token/TokenProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract LGTProxy (LGT/LGTProxy.sol#8-80) has payable functions:
	 - LGTProxy.fallback() (LGT/LGTProxy.sol#55-79)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract Verifier_ReceiverProxy (Ticket/Proxies/Verifier_ReceiverProxy.sol#8-80) has payable functions:
	 - Verifier_ReceiverProxy.fallback() (Ticket/Proxies/Verifier_ReceiverProxy.sol#55-79)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in ClusterRegistry.exit() (Actors/ClusterRegistry.sol#95-103):
	External calls:
	- require(bool,string)(LINProxy.transfer(msg.sender,cluster.stake),ClusterRegistry: Remaining stake couldn't be returned) (Actors/ClusterRegistry.sol#100)
	State variables written after the call(s):
	- delete clusters[msg.sender] (Actors/ClusterRegistry.sol#102)
Reentrancy in Mintable.mint(uint256) (LGT/Mintable.sol#19-24):
	External calls:
	- token.burnFrom(msg.sender,_burnAmount) (LGT/Mintable.sol#21)
	State variables written after the call(s):
	- _mint(msg.sender,amount) (LGT/Mintable.sol#22)
		- _totalSupply = _totalSupply.add(amount) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#176)
Reentrancy in VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool) (Ticket/Verifier_Receiver.sol#45-93):
	External calls:
	- require(bool,string)(receiverManager.isValidReceiver(receiver),Verifier_Receiver: Invalid Receiver) (Ticket/Verifier_Receiver.sol#53)
	- require(bool,string)(uint256(clusterRegistry.getClusterStatus(_cluster)) == 2,Verifier_Receiver: Cluster isn't active) (Ticket/Verifier_Receiver.sol#57)
	- luckLimit = luckManager.getLuck(epoch,receiverRole) (Ticket/Verifier_Receiver.sol#64)
	- inflationLog = fundManager.draw(address(pot),block.number) (Ticket/Verifier_Receiver.sol#69)
	- require(bool,string)(pot.addToPot(epochs,address(fundManager),tokenId,values),Verifier_Receiver: Could not add to pot) (Ticket/Verifier_Receiver.sol#76-77)
	- require(bool,string)(pot.claimTicket(roles,claimers,epochs_scope_0),Verifier_Receiver: Ticket claim failed) (Ticket/Verifier_Receiver.sol#88-89)
	State variables written after the call(s):
	- claimedTickets[ticket] = true (Ticket/Verifier_Receiver.sol#91)
Reentrancy in VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool) (Ticket/Verifier_Producer.sol#46-97):
	External calls:
	- require(bool,string)(uint256(clusterRegistry.getClusterStatus(_cluster)) == 2,Verifier_Producer: Cluster isn't active) (Ticket/Verifier_Producer.sol#60)
	- luckLimit = luckManager.getLuck(epoch,producerRole) (Ticket/Verifier_Producer.sol#68)
	- inflationLog = fundManager.draw(address(pot),block.number) (Ticket/Verifier_Producer.sol#73)
	- require(bool,string)(pot.addToPot(epochs,address(fundManager),tokenId,values),Verifier_Producer: Could not add to pot) (Ticket/Verifier_Producer.sol#80-81)
	- require(bool,string)(pot.claimTicket(roles,claimers,epochs_scope_0),Verifier_Producer: Ticket claim failed) (Ticket/Verifier_Producer.sol#92-93)
	State variables written after the call(s):
	- rewardedBlocks[blockHash] = true (Ticket/Verifier_Producer.sol#95)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
Pot.claimFeeReward(bytes32,uint256[]).claimedAmount (Fund/Pot.sol#208) is a local variable never initialized
FundManager.createFund(address,uint256,uint256,uint256).inflationLogInit (Fund/FundManager.sol#84) is a local variable never initialized
VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool).epochs (Ticket/Verifier_Producer.sol#71) is a local variable never initialized
VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool).epochs (Ticket/Verifier_Receiver.sol#67) is a local variable never initialized
VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool).values (Ticket/Verifier_Receiver.sol#68) is a local variable never initialized
FundManager.draw(address,uint256).withdrawalAmount (Fund/FundManager.sol#207) is a local variable never initialized
VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool).values (Ticket/Verifier_Producer.sol#72) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (governance/GovernorAlpha.sol#187-190) ignores return value by timelock.queueTransaction(target,value,signature,data,eta) (governance/GovernorAlpha.sol#189)
GovernorAlpha.execute(uint256) (governance/GovernorAlpha.sol#192-200) ignores return value by timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (governance/GovernorAlpha.sol#197)
GovernorAlpha.__queueSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#291-294) ignores return value by timelock.queueTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (governance/GovernorAlpha.sol#293)
GovernorAlpha.__executeSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#296-299) ignores return value by timelock.executeTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (governance/GovernorAlpha.sol#298)
Pot.claimFeeReward(bytes32,uint256[]) (Fund/Pot.sol#205-239) ignores return value by IERC20(tokens[tokenList[i_scope_0]]).transfer(msg.sender,claimedAmount[i_scope_0]) (Fund/Pot.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
GovernorAlpha.cancel(uint256).state (governance/GovernorAlpha.sol#203) shadows:
	- GovernorAlpha.state(uint256) (governance/GovernorAlpha.sol#226-246) (function)
LGTLogic.initialize(string,string,uint8,address)._name (LGT/LGTToken.sol#11) shadows:
	- ERC20Detailed._name (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#10) (state variable)
LGTLogic.initialize(string,string,uint8,address)._symbol (LGT/LGTToken.sol#12) shadows:
	- ERC20Detailed._symbol (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#11) (state variable)
LGTLogic.initialize(string,string,uint8,address).tokenToBurn (LGT/LGTToken.sol#14) shadows:
	- Mintable.tokenToBurn (LGT/Mintable.sol#10) (state variable)
TokenLogic.initialize(string,string,uint8)._name (Token/TokenLogic.sol#18) shadows:
	- ERC20Detailed._name (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#10) (state variable)
TokenLogic.initialize(string,string,uint8)._symbol (Token/TokenLogic.sol#19) shadows:
	- ERC20Detailed._symbol (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#11) (state variable)
ERC20Detailed.initialize(string,string,uint8).name (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#19) shadows:
	- ERC20Detailed.name() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#28-30) (function)
ERC20Detailed.initialize(string,string,uint8).symbol (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#19) shadows:
	- ERC20Detailed.symbol() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#36-38) (function)
ERC20Detailed.initialize(string,string,uint8).decimals (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#19) shadows:
	- ERC20Detailed.decimals() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#52-54) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
GovernorAlpha.execute(uint256) (governance/GovernorAlpha.sol#192-200) has external calls inside a loop: timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (governance/GovernorAlpha.sol#197)
GovernorAlpha.cancel(uint256) (governance/GovernorAlpha.sol#202-215) has external calls inside a loop: timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (governance/GovernorAlpha.sol#211)
LuckManager.getLuck(uint256,bytes32) (Ticket/LuckManager.sol#78-108) has external calls inside a loop: maxClaimAtEpoch = pot.getMaxClaims(epochCounter,_role) (Ticket/LuckManager.sol#92)
Pot.claimFeeReward(bytes32,uint256[]) (Fund/Pot.sol#205-239) has external calls inside a loop: IERC20(tokens[tokenList[i_scope_0]]).transfer(msg.sender,claimedAmount[i_scope_0]) (Fund/Pot.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in Mintable.mint(uint256) (LGT/Mintable.sol#19-24):
	External calls:
	- token.burnFrom(msg.sender,_burnAmount) (LGT/Mintable.sol#21)
	State variables written after the call(s):
	- _mint(msg.sender,amount) (LGT/Mintable.sol#22)
		- _balances[account] = _balances[account].add(amount) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#177)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in FundManager.draw(address,uint256) (Fund/FundManager.sol#201-247):
	External calls:
	- require(bool,string)(LINProxy.approve(_pot,withdrawalAmount),Fund not allocated to pot) (Fund/FundManager.sol#244)
	Event emitted after the call(s):
	- FundDrawn(_pot,withdrawalAmount,fundBalance) (Fund/FundManager.sol#245)
Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#80-105):
	External calls:
	- (success,returnData) = target.call.value(value)(callData) (governance/Timelock.sol#99)
	Event emitted after the call(s):
	- ExecuteTransaction(txHash,target,value,signature,data,eta) (governance/Timelock.sol#102)
Reentrancy in ClusterRegistry.exit() (Actors/ClusterRegistry.sol#95-103):
	External calls:
	- require(bool,string)(LINProxy.transfer(msg.sender,cluster.stake),ClusterRegistry: Remaining stake couldn't be returned) (Actors/ClusterRegistry.sol#100)
	Event emitted after the call(s):
	- ClusterExited(msg.sender,cluster.stake,currentEpoch) (Actors/ClusterRegistry.sol#101)
Reentrancy in Mintable.mint(uint256) (LGT/Mintable.sol#19-24):
	External calls:
	- token.burnFrom(msg.sender,_burnAmount) (LGT/Mintable.sol#21)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#178)
		- _mint(msg.sender,amount) (LGT/Mintable.sol#22)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (governance/GovernorAlpha.sol#187-190) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! timelock.queuedTransactions(keccak256(bytes)(abi.encode(target,value,signature,data,eta))),GovernorAlpha::_queueOrRevert: proposal action already queued at eta) (governance/GovernorAlpha.sol#188)
GovernorAlpha.state(uint256) (governance/GovernorAlpha.sol#226-246) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= add256(proposal.eta,timelock.GRACE_PERIOD()) (governance/GovernorAlpha.sol#241)
GovernorAlpha.add256(uint256,uint256) (governance/GovernorAlpha.sol#301-305) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(c >= a,addition overflow) (governance/GovernorAlpha.sol#303)
Comp.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (governance/Comp.sol#161-170) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,Comp::delegateBySig: signature expired) (governance/Comp.sol#168)
Timelock.queueTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#60-69) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.) (governance/Timelock.sol#62)
Timelock.executeTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#80-105) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (governance/Timelock.sol#85)
	- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (governance/Timelock.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
VerifierReceiver.splitSignature(bytes) (Ticket/Verifier_Receiver.sol#125-142) uses assembly
	- INLINE ASM None (Ticket/Verifier_Receiver.sol#132-139)
GovernorAlpha.getChainId() (governance/GovernorAlpha.sol#312-316) uses assembly
	- INLINE ASM None (governance/GovernorAlpha.sol#314)
ProducerProxy.constructor(address) (Actors/Proxies/ProducerProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/ProducerProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/ProducerProxy.sol#25-27)
ProducerProxy.updateLogic(address) (Actors/Proxies/ProducerProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/ProducerProxy.sol#39-41)
ProducerProxy.getAdmin() (Actors/Proxies/ProducerProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/ProducerProxy.sol#48-50)
ProducerProxy.fallback() (Actors/Proxies/ProducerProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/ProducerProxy.sol#57-78)
LuckManagerProxy.constructor(address) (Ticket/Proxies/LuckManagerProxy.sol#16-28) uses assembly
	- INLINE ASM None (Ticket/Proxies/LuckManagerProxy.sol#19-21)
	- INLINE ASM None (Ticket/Proxies/LuckManagerProxy.sol#25-27)
LuckManagerProxy.updateLogic(address) (Ticket/Proxies/LuckManagerProxy.sol#33-42) uses assembly
	- INLINE ASM None (Ticket/Proxies/LuckManagerProxy.sol#39-41)
LuckManagerProxy.getAdmin() (Ticket/Proxies/LuckManagerProxy.sol#46-51) uses assembly
	- INLINE ASM None (Ticket/Proxies/LuckManagerProxy.sol#48-50)
LuckManagerProxy.fallback() (Ticket/Proxies/LuckManagerProxy.sol#55-79) uses assembly
	- INLINE ASM None (Ticket/Proxies/LuckManagerProxy.sol#57-78)
ReceiverProxy.constructor(address) (Actors/Proxies/ReceiverProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/ReceiverProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/ReceiverProxy.sol#25-27)
ReceiverProxy.updateLogic(address) (Actors/Proxies/ReceiverProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/ReceiverProxy.sol#39-41)
ReceiverProxy.getAdmin() (Actors/Proxies/ReceiverProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/ReceiverProxy.sol#48-50)
ReceiverProxy.fallback() (Actors/Proxies/ReceiverProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/ReceiverProxy.sol#57-78)
ClusterDefaultProxy.constructor(address) (Actors/Proxies/ClusterDefaultProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterDefaultProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/ClusterDefaultProxy.sol#25-27)
ClusterDefaultProxy.updateLogic(address) (Actors/Proxies/ClusterDefaultProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterDefaultProxy.sol#39-41)
ClusterDefaultProxy.getAdmin() (Actors/Proxies/ClusterDefaultProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterDefaultProxy.sol#48-50)
ClusterDefaultProxy.fallback() (Actors/Proxies/ClusterDefaultProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterDefaultProxy.sol#57-78)
Producer.splitSignature(bytes) (Actors/Producer.sol#36-47) uses assembly
	- INLINE ASM None (Actors/Producer.sol#41-45)
Initializable.isConstructor() (@openzeppelin/upgrades/contracts/Initializable.sol#48-58) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/Initializable.sol#56)
RelayerProxy.constructor(address) (Actors/Proxies/RelayerProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/RelayerProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/RelayerProxy.sol#25-27)
RelayerProxy.updateLogic(address) (Actors/Proxies/RelayerProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/RelayerProxy.sol#39-41)
RelayerProxy.getAdmin() (Actors/Proxies/RelayerProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/RelayerProxy.sol#48-50)
RelayerProxy.fallback() (Actors/Proxies/RelayerProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/RelayerProxy.sol#57-78)
Verifier_ProducerProxy.constructor(address) (Ticket/Proxies/Verifier_ProducerProxy.sol#16-28) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ProducerProxy.sol#19-21)
	- INLINE ASM None (Ticket/Proxies/Verifier_ProducerProxy.sol#25-27)
Verifier_ProducerProxy.updateLogic(address) (Ticket/Proxies/Verifier_ProducerProxy.sol#33-42) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ProducerProxy.sol#39-41)
Verifier_ProducerProxy.getAdmin() (Ticket/Proxies/Verifier_ProducerProxy.sol#46-51) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ProducerProxy.sol#48-50)
Verifier_ProducerProxy.fallback() (Ticket/Proxies/Verifier_ProducerProxy.sol#55-79) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ProducerProxy.sol#57-78)
PotProxy.constructor(address) (Fund/Proxies/PotProxy.sol#16-28) uses assembly
	- INLINE ASM None (Fund/Proxies/PotProxy.sol#19-21)
	- INLINE ASM None (Fund/Proxies/PotProxy.sol#25-27)
PotProxy.updateLogic(address) (Fund/Proxies/PotProxy.sol#33-42) uses assembly
	- INLINE ASM None (Fund/Proxies/PotProxy.sol#39-41)
PotProxy.getAdmin() (Fund/Proxies/PotProxy.sol#46-51) uses assembly
	- INLINE ASM None (Fund/Proxies/PotProxy.sol#48-50)
PotProxy.fallback() (Fund/Proxies/PotProxy.sol#55-79) uses assembly
	- INLINE ASM None (Fund/Proxies/PotProxy.sol#57-78)
ClusterProxy.constructor(address) (Actors/Proxies/ClusterProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/ClusterProxy.sol#25-27)
ClusterProxy.updateLogic(address) (Actors/Proxies/ClusterProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterProxy.sol#39-41)
ClusterProxy.getAdmin() (Actors/Proxies/ClusterProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterProxy.sol#48-50)
ClusterProxy.fallback() (Actors/Proxies/ClusterProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterProxy.sol#57-78)
VerifierProducer.splitSignature(bytes) (Ticket/Verifier_Producer.sol#133-150) uses assembly
	- INLINE ASM None (Ticket/Verifier_Producer.sol#140-147)
FundManagerProxy.constructor(address) (Fund/Proxies/FundManagerProxy.sol#16-28) uses assembly
	- INLINE ASM None (Fund/Proxies/FundManagerProxy.sol#19-21)
	- INLINE ASM None (Fund/Proxies/FundManagerProxy.sol#25-27)
FundManagerProxy.updateLogic(address) (Fund/Proxies/FundManagerProxy.sol#33-42) uses assembly
	- INLINE ASM None (Fund/Proxies/FundManagerProxy.sol#39-41)
FundManagerProxy.getAdmin() (Fund/Proxies/FundManagerProxy.sol#46-51) uses assembly
	- INLINE ASM None (Fund/Proxies/FundManagerProxy.sol#48-50)
FundManagerProxy.fallback() (Fund/Proxies/FundManagerProxy.sol#55-79) uses assembly
	- INLINE ASM None (Fund/Proxies/FundManagerProxy.sol#57-78)
Comp.getChainId() (governance/Comp.sol#296-300) uses assembly
	- INLINE ASM None (governance/Comp.sol#298)
Verifer_NetworkRewardProxy.constructor(address) (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#16-28) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#19-21)
	- INLINE ASM None (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#25-27)
Verifer_NetworkRewardProxy.updateLogic(address) (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#33-42) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#39-41)
Verifer_NetworkRewardProxy.getAdmin() (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#46-51) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#48-50)
Verifer_NetworkRewardProxy.fallback() (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#55-79) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#57-78)
ClusterRegistryProxy.constructor(address) (Actors/Proxies/ClusterRegistryProxy.sol#16-28) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterRegistryProxy.sol#19-21)
	- INLINE ASM None (Actors/Proxies/ClusterRegistryProxy.sol#25-27)
ClusterRegistryProxy.updateLogic(address) (Actors/Proxies/ClusterRegistryProxy.sol#33-42) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterRegistryProxy.sol#39-41)
ClusterRegistryProxy.getAdmin() (Actors/Proxies/ClusterRegistryProxy.sol#46-51) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterRegistryProxy.sol#48-50)
ClusterRegistryProxy.fallback() (Actors/Proxies/ClusterRegistryProxy.sol#55-79) uses assembly
	- INLINE ASM None (Actors/Proxies/ClusterRegistryProxy.sol#57-78)
TokenProxy.constructor(address) (Token/TokenProxy.sol#16-28) uses assembly
	- INLINE ASM None (Token/TokenProxy.sol#19-21)
	- INLINE ASM None (Token/TokenProxy.sol#25-27)
TokenProxy.updateLogic(address) (Token/TokenProxy.sol#33-42) uses assembly
	- INLINE ASM None (Token/TokenProxy.sol#39-41)
TokenProxy.getAdmin() (Token/TokenProxy.sol#46-51) uses assembly
	- INLINE ASM None (Token/TokenProxy.sol#48-50)
TokenProxy.fallback() (Token/TokenProxy.sol#55-79) uses assembly
	- INLINE ASM None (Token/TokenProxy.sol#57-78)
LGTProxy.constructor(address) (LGT/LGTProxy.sol#16-28) uses assembly
	- INLINE ASM None (LGT/LGTProxy.sol#19-21)
	- INLINE ASM None (LGT/LGTProxy.sol#25-27)
LGTProxy.updateLogic(address) (LGT/LGTProxy.sol#33-42) uses assembly
	- INLINE ASM None (LGT/LGTProxy.sol#39-41)
LGTProxy.getAdmin() (LGT/LGTProxy.sol#46-51) uses assembly
	- INLINE ASM None (LGT/LGTProxy.sol#48-50)
LGTProxy.fallback() (LGT/LGTProxy.sol#55-79) uses assembly
	- INLINE ASM None (LGT/LGTProxy.sol#57-78)
Verifier_ReceiverProxy.constructor(address) (Ticket/Proxies/Verifier_ReceiverProxy.sol#16-28) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ReceiverProxy.sol#19-21)
	- INLINE ASM None (Ticket/Proxies/Verifier_ReceiverProxy.sol#25-27)
Verifier_ReceiverProxy.updateLogic(address) (Ticket/Proxies/Verifier_ReceiverProxy.sol#33-42) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ReceiverProxy.sol#39-41)
Verifier_ReceiverProxy.getAdmin() (Ticket/Proxies/Verifier_ReceiverProxy.sol#46-51) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ReceiverProxy.sol#48-50)
Verifier_ReceiverProxy.fallback() (Ticket/Proxies/Verifier_ReceiverProxy.sol#55-79) uses assembly
	- INLINE ASM None (Ticket/Proxies/Verifier_ReceiverProxy.sol#57-78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
GovernorAlpha._castVote(address,uint256,bool) (governance/GovernorAlpha.sol#261-279) compares to a boolean constant:
	-require(bool,string)(receipt.hasVoted == false,GovernorAlpha::_castVote: voter already voted) (governance/GovernorAlpha.sol#265)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['>=0.4.21<0.7.0', '>=0.4.24<0.7.0', '^0.5.0', '^0.5.16']
	- >=0.4.21<0.7.0 (Ticket/Verifier_Receiver.sol#3)
	- ABIEncoderV2 (Ticket/Verifier_Receiver.sol#4)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol#1)
	- ^0.5.16 (governance/GovernorAlpha.sol#1)
	- ABIEncoderV2 (governance/GovernorAlpha.sol#2)
	- >=0.4.21<0.7.0 (Actors/Proxies/ProducerProxy.sol#1)
	- >=0.4.21<0.7.0 (Actors/Relayer.sol#3)
	- >=0.4.21<0.7.0 (LGT/LGTToken.sol#1)
	- >=0.4.21<0.7.0 (Fund/FundManager.sol#3)
	- ABIEncoderV2 (Fund/FundManager.sol#4)
	- >=0.4.21<0.7.0 (Token/TokenLogic.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#1)
	- >=0.4.21<0.7.0 (Ticket/Proxies/LuckManagerProxy.sol#1)
	- >=0.4.21<0.7.0 (LGT/Curve.sol#1)
	- >=0.4.21<0.7.0 (Actors/Proxies/ReceiverProxy.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol#1)
	- >=0.4.21<0.7.0 (Actors/Proxies/ClusterDefaultProxy.sol#1)
	- >=0.4.21<0.7.0 (Actors/Producer.sol#2)
	- >=0.4.24<0.7.0 (@openzeppelin/upgrades/contracts/Initializable.sol#1)
	- >=0.4.21<0.7.0 (Ticket/LuckManager.sol#3)
	- ABIEncoderV2 (Ticket/LuckManager.sol#4)
	- >=0.4.21<0.7.0 (Ticket/Verifier_NetworkReward.sol#3)
	- >=0.4.21<0.7.0 (Actors/ClusterRegistry.sol#3)
	- >=0.4.21<0.7.0 (Actors/Proxies/RelayerProxy.sol#1)
	- >=0.4.21<0.7.0 (Fund/Pot.sol#3)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol#1)
	- >=0.4.21<0.7.0 (Actors/Cluster.sol#3)
	- >=0.4.21<0.7.0 (Ticket/Proxies/Verifier_ProducerProxy.sol#1)
	- >=0.4.21<0.7.0 (Fund/Proxies/PotProxy.sol#1)
	- >=0.4.21<0.7.0 (Actors/Proxies/ClusterProxy.sol#1)
	- >=0.4.21<0.7.0 (Actors/ClusterDefault.sol#3)
	- >=0.4.21<0.7.0 (Ticket/Verifier_Producer.sol#3)
	- ABIEncoderV2 (Ticket/Verifier_Producer.sol#4)
	- >=0.4.21<0.7.0 (Fund/Proxies/FundManagerProxy.sol#1)
	- ^0.5.16 (governance/Comp.sol#1)
	- ABIEncoderV2 (governance/Comp.sol#2)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol#1)
	- >=0.4.21<0.7.0 (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#1)
	- ^0.5.16 (governance/Timelock.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#1)
	- >=0.4.21<0.7.0 (LGT/VoteDelegate.sol#1)
	- >=0.4.21<0.7.0 (Actors/Proxies/ClusterRegistryProxy.sol#1)
	- >=0.4.21<0.7.0 (Actors/Receiver.sol#2)
	- >=0.4.21<0.7.0 (Token/TokenProxy.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#1)
	- >=0.4.21<0.7.0 (Migrations.sol#1)
	- >=0.4.21<0.7.0 (LGT/LGTProxy.sol#1)
	- >=0.4.21<0.7.0 (Ticket/Proxies/Verifier_ReceiverProxy.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#1)
	- ^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol#1)
	- >=0.4.21<0.7.0 (LGT/Mintable.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version>=0.4.21<0.7.0 (Ticket/Verifier_Receiver.sol#3) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol#1) allows old versions
Pragma version^0.5.16 (governance/GovernorAlpha.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/ProducerProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Relayer.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (LGT/LGTToken.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Fund/FundManager.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Token/TokenLogic.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Proxies/LuckManagerProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (LGT/Curve.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/ReceiverProxy.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/ClusterDefaultProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Producer.sol#2) allows old versions
Pragma version>=0.4.24<0.7.0 (@openzeppelin/upgrades/contracts/Initializable.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/LuckManager.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Verifier_NetworkReward.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/ClusterRegistry.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/RelayerProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Fund/Pot.sol#3) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Cluster.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Proxies/Verifier_ProducerProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Fund/Proxies/PotProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/ClusterProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/ClusterDefault.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Verifier_Producer.sol#3) allows old versions
Pragma version>=0.4.21<0.7.0 (Fund/Proxies/FundManagerProxy.sol#1) allows old versions
Pragma version^0.5.16 (governance/Comp.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#1) allows old versions
Pragma version^0.5.16 (governance/Timelock.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (LGT/VoteDelegate.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Proxies/ClusterRegistryProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Actors/Receiver.sol#2) allows old versions
Pragma version>=0.4.21<0.7.0 (Token/TokenProxy.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Migrations.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (LGT/LGTProxy.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (Ticket/Proxies/Verifier_ReceiverProxy.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol#1) allows old versions
Pragma version>=0.4.21<0.7.0 (LGT/Mintable.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#80-105):
	- (success,returnData) = target.call.value(value)(callData) (governance/Timelock.sol#99)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._receiverRegistry (Ticket/Verifier_Receiver.sol#27) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._clusterRegistry (Ticket/Verifier_Receiver.sol#28) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._luckManager (Ticket/Verifier_Receiver.sol#29) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._pot (Ticket/Verifier_Receiver.sol#30) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._fundManager (Ticket/Verifier_Receiver.sol#31) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._receiverRole (Ticket/Verifier_Receiver.sol#32) is not in mixedCase
Parameter VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32)._tokenId (Ticket/Verifier_Receiver.sol#33) is not in mixedCase
Parameter VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool)._blockHeader (Ticket/Verifier_Receiver.sol#45) is not in mixedCase
Parameter VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool)._receiverSig (Ticket/Verifier_Receiver.sol#46) is not in mixedCase
Parameter VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool)._relayerSig (Ticket/Verifier_Receiver.sol#47) is not in mixedCase
Parameter VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool)._cluster (Ticket/Verifier_Receiver.sol#48) is not in mixedCase
Parameter VerifierReceiver.verifyClaim(bytes,bytes,bytes,address,bool)._isAggregated (Ticket/Verifier_Receiver.sol#49) is not in mixedCase
Parameter VerifierReceiver.verifyClaims(bytes[],bytes[],bytes[],address[])._blockHeaders (Ticket/Verifier_Receiver.sol#95) is not in mixedCase
Parameter VerifierReceiver.verifyClaims(bytes[],bytes[],bytes[],address[])._relayerSigs (Ticket/Verifier_Receiver.sol#96) is not in mixedCase
Parameter VerifierReceiver.verifyClaims(bytes[],bytes[],bytes[],address[])._producerSigs (Ticket/Verifier_Receiver.sol#97) is not in mixedCase
Parameter VerifierReceiver.verifyClaims(bytes[],bytes[],bytes[],address[])._clusters (Ticket/Verifier_Receiver.sol#98) is not in mixedCase
Function GovernorAlpha.__acceptAdmin() (governance/GovernorAlpha.sol#281-284) is not in mixedCase
Function GovernorAlpha.__abdicate() (governance/GovernorAlpha.sol#286-289) is not in mixedCase
Function GovernorAlpha.__queueSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#291-294) is not in mixedCase
Function GovernorAlpha.__executeSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#296-299) is not in mixedCase
Function TimelockInterface.GRACE_PERIOD() (governance/GovernorAlpha.sol#321) is not in mixedCase
Parameter LGTLogic.initialize(string,string,uint8,address)._name (LGT/LGTToken.sol#11) is not in mixedCase
Parameter LGTLogic.initialize(string,string,uint8,address)._symbol (LGT/LGTToken.sol#12) is not in mixedCase
Parameter LGTLogic.initialize(string,string,uint8,address)._decimal (LGT/LGTToken.sol#13) is not in mixedCase
Parameter FundManager.initialize(address,address)._LINProxy (Fund/FundManager.sol#48) is not in mixedCase
Parameter FundManager.initialize(address,address)._governanceEnforcerProxy (Fund/FundManager.sol#48) is not in mixedCase
Parameter FundManager.createFund(address,uint256,uint256,uint256)._pot (Fund/FundManager.sol#74) is not in mixedCase
Parameter FundManager.createFund(address,uint256,uint256,uint256)._inflationPerEpoch (Fund/FundManager.sol#75) is not in mixedCase
Parameter FundManager.createFund(address,uint256,uint256,uint256)._endEpoch (Fund/FundManager.sol#76) is not in mixedCase
Parameter FundManager.createFund(address,uint256,uint256,uint256)._lastDrawnEpoch (Fund/FundManager.sol#77) is not in mixedCase
Parameter FundManager.updateFundInflation(uint256,uint256,address)._updatedInflation (Fund/FundManager.sol#90) is not in mixedCase
Parameter FundManager.updateFundInflation(uint256,uint256,address)._epochOfUpdate (Fund/FundManager.sol#91) is not in mixedCase
Parameter FundManager.updateFundInflation(uint256,uint256,address)._pot (Fund/FundManager.sol#92) is not in mixedCase
Parameter FundManager.updateEndEpoch(uint256,address)._updatedEndEpoch (Fund/FundManager.sol#145) is not in mixedCase
Parameter FundManager.updateEndEpoch(uint256,address)._pot (Fund/FundManager.sol#146) is not in mixedCase
Parameter FundManager.updateFundPot(address,address)._currentPotAddress (Fund/FundManager.sol#192) is not in mixedCase
Parameter FundManager.updateFundPot(address,address)._updatedPotAddress (Fund/FundManager.sol#192) is not in mixedCase
Parameter FundManager.draw(address,uint256)._pot (Fund/FundManager.sol#201) is not in mixedCase
Parameter FundManager.draw(address,uint256)._blockNo (Fund/FundManager.sol#201) is not in mixedCase
Parameter FundManager.handleInflationChange(address,uint256)._pot (Fund/FundManager.sol#249) is not in mixedCase
Parameter FundManager.handleInflationChange(address,uint256)._currentEpoch (Fund/FundManager.sol#250) is not in mixedCase
Variable FundManager.MAX_INT (Fund/FundManager.sol#13) is not in mixedCase
Variable FundManager.LINProxy (Fund/FundManager.sol#15) is not in mixedCase
Variable FundManager.GovernanceEnforcerProxy (Fund/FundManager.sol#16) is not in mixedCase
Parameter TokenLogic.initialize(string,string,uint8)._name (Token/TokenLogic.sol#18) is not in mixedCase
Parameter TokenLogic.initialize(string,string,uint8)._symbol (Token/TokenLogic.sol#19) is not in mixedCase
Parameter TokenLogic.initialize(string,string,uint8)._decimal (Token/TokenLogic.sol#20) is not in mixedCase
Variable ERC20Burnable.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#30) is not in mixedCase
Parameter Producer.addProducer(address,bytes)._producer (Actors/Producer.sol#20) is not in mixedCase
Parameter Producer.addProducer(address,bytes)._sig (Actors/Producer.sol#20) is not in mixedCase
Parameter Producer.createPayloadToSig(address)._producer (Actors/Producer.sol#27) is not in mixedCase
Parameter Producer.getProducer(bytes)._producer (Actors/Producer.sol#32) is not in mixedCase
Variable Producer.id_extended (Actors/Producer.sol#10) is not in mixedCase
Variable Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is not in mixedCase
Parameter LuckManager.initialize(address,address,bytes32[],uint256[][])._governanceEnforcerProxy (Ticket/LuckManager.sol#37) is not in mixedCase
Parameter LuckManager.initialize(address,address,bytes32[],uint256[][])._pot (Ticket/LuckManager.sol#38) is not in mixedCase
Parameter LuckManager.initialize(address,address,bytes32[],uint256[][])._roles (Ticket/LuckManager.sol#39) is not in mixedCase
Parameter LuckManager.initialize(address,address,bytes32[],uint256[][])._luckPerRoles (Ticket/LuckManager.sol#40) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._role (Ticket/LuckManager.sol#57) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._luckTrailingEpochs (Ticket/LuckManager.sol#58) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._targetClaims (Ticket/LuckManager.sol#59) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._averagingEpochs (Ticket/LuckManager.sol#60) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._startingEpoch (Ticket/LuckManager.sol#61) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._varianceTolerance (Ticket/LuckManager.sol#62) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._changeSteps (Ticket/LuckManager.sol#63) is not in mixedCase
Parameter LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)._initialLuck (Ticket/LuckManager.sol#64) is not in mixedCase
Parameter LuckManager.getLuck(uint256,bytes32)._epoch (Ticket/LuckManager.sol#78) is not in mixedCase
Parameter LuckManager.getLuck(uint256,bytes32)._role (Ticket/LuckManager.sol#78) is not in mixedCase
Parameter LuckManager.getNextLuck(uint256,uint256,LuckManager.LuckPerRole)._previousLuck (Ticket/LuckManager.sol#110) is not in mixedCase
Parameter LuckManager.getNextLuck(uint256,uint256,LuckManager.LuckPerRole)._averageClaims (Ticket/LuckManager.sol#110) is not in mixedCase
Parameter LuckManager.changeLuckTrailingEpochs(bytes32,uint256)._role (Ticket/LuckManager.sol#131) is not in mixedCase
Parameter LuckManager.changeLuckTrailingEpochs(bytes32,uint256)._updatedLuckTrailingEpochs (Ticket/LuckManager.sol#132) is not in mixedCase
Parameter LuckManager.changeTargetClaims(bytes32,uint256)._role (Ticket/LuckManager.sol#140) is not in mixedCase
Parameter LuckManager.changeTargetClaims(bytes32,uint256)._updatedTargetClaims (Ticket/LuckManager.sol#141) is not in mixedCase
Parameter LuckManager.changeAveragingEpochs(bytes32,uint256)._role (Ticket/LuckManager.sol#149) is not in mixedCase
Parameter LuckManager.changeAveragingEpochs(bytes32,uint256)._updatedAveragingEpochs (Ticket/LuckManager.sol#150) is not in mixedCase
Parameter LuckManager.changeVarianceTolerance(bytes32,uint256)._role (Ticket/LuckManager.sol#158) is not in mixedCase
Parameter LuckManager.changeVarianceTolerance(bytes32,uint256)._updatedVarianceTolerance (Ticket/LuckManager.sol#159) is not in mixedCase
Parameter LuckManager.changeChangeSteps(bytes32,uint256)._role (Ticket/LuckManager.sol#167) is not in mixedCase
Parameter LuckManager.changeChangeSteps(bytes32,uint256)._updatedChangeSteps (Ticket/LuckManager.sol#168) is not in mixedCase
Variable LuckManager.GovernanceEnforcerProxy (Ticket/LuckManager.sol#13) is not in mixedCase
Contract Verifier_NetworkReward (Ticket/Verifier_NetworkReward.sol#7-11) is not in CapWords
Parameter ClusterRegistry.initialize(address,uint256,uint256,address,address)._defaultCluster (Actors/ClusterRegistry.sol#40) is not in mixedCase
Parameter ClusterRegistry.initialize(address,uint256,uint256,address,address)._clusterExitWaitEpochs (Actors/ClusterRegistry.sol#41) is not in mixedCase
Parameter ClusterRegistry.initialize(address,uint256,uint256,address,address)._minStakeAmount (Actors/ClusterRegistry.sol#42) is not in mixedCase
Parameter ClusterRegistry.initialize(address,uint256,uint256,address,address)._LINToken (Actors/ClusterRegistry.sol#43) is not in mixedCase
Parameter ClusterRegistry.initialize(address,uint256,uint256,address,address)._pot (Actors/ClusterRegistry.sol#44) is not in mixedCase
Parameter ClusterRegistry.addCluster(uint256)._stakeValue (Actors/ClusterRegistry.sol#70) is not in mixedCase
Parameter ClusterRegistry.getClusterStatus(address)._clusterAddress (Actors/ClusterRegistry.sol#105) is not in mixedCase
Parameter ClusterRegistry.changeClusterExitWaitEpochs(uint256)._updatedClusterExitWaitEpochs (Actors/ClusterRegistry.sol#116) is not in mixedCase
Parameter ClusterRegistry.changeMinStakeAmount(uint256)._updatedMinStakeAmount (Actors/ClusterRegistry.sol#125) is not in mixedCase
Variable ClusterRegistry.LINProxy (Actors/ClusterRegistry.sol#14) is not in mixedCase
Variable ClusterRegistry.GovernanceEnforcerProxy (Actors/ClusterRegistry.sol#16) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._governanceEnforcerProxy (Fund/Pot.sol#60) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._firstEpochStartBlock (Fund/Pot.sol#61) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._EthBlocksPerEpoch (Fund/Pot.sol#62) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._ids (Fund/Pot.sol#63) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._fractionPerCent (Fund/Pot.sol#64) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._tokens (Fund/Pot.sol#65) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._tokenContracts (Fund/Pot.sol#66) is not in mixedCase
Parameter Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[])._epochsToWaitForClaims (Fund/Pot.sol#67) is not in mixedCase
Parameter Pot.addVerifier(address)._verifier (Fund/Pot.sol#84) is not in mixedCase
Parameter Pot.removeVerifier(address)._verifier (Fund/Pot.sol#92) is not in mixedCase
Parameter Pot.updateSupportedTokenList(bytes32[],address[])._tokens (Fund/Pot.sol#100) is not in mixedCase
Parameter Pot.updateSupportedTokenList(bytes32[],address[])._tokenContracts (Fund/Pot.sol#100) is not in mixedCase
Parameter Pot.changeEpochsToWaitForClaims(uint256,uint256,bytes32)._updatedWaitEpochs (Fund/Pot.sol#111) is not in mixedCase
Parameter Pot.changeEpochsToWaitForClaims(uint256,uint256,bytes32)._epochToUpdate (Fund/Pot.sol#112) is not in mixedCase
Parameter Pot.changeEpochsToWaitForClaims(uint256,uint256,bytes32)._role (Fund/Pot.sol#113) is not in mixedCase
Parameter Pot.changeEthBlocksPerEpoch(uint256)._updatedBlockPerEpoch (Fund/Pot.sol#125) is not in mixedCase
Parameter Pot.allocatePot(bytes32[],uint256[])._ids (Fund/Pot.sol#133) is not in mixedCase
Parameter Pot.allocatePot(bytes32[],uint256[])._fractionPerCent (Fund/Pot.sol#134) is not in mixedCase
Parameter Pot.getEpoch(uint256)._blockNumber (Fund/Pot.sol#161) is not in mixedCase
Parameter Pot.addToPot(uint256[],address,bytes32,uint256[])._epochs (Fund/Pot.sol#167) is not in mixedCase
Parameter Pot.addToPot(uint256[],address,bytes32,uint256[])._source (Fund/Pot.sol#168) is not in mixedCase
Parameter Pot.addToPot(uint256[],address,bytes32,uint256[])._token (Fund/Pot.sol#169) is not in mixedCase
Parameter Pot.addToPot(uint256[],address,bytes32,uint256[])._values (Fund/Pot.sol#170) is not in mixedCase
Parameter Pot.claimTicket(bytes32[],address[],uint256[])._roles (Fund/Pot.sol#186) is not in mixedCase
Parameter Pot.claimTicket(bytes32[],address[],uint256[])._claimers (Fund/Pot.sol#187) is not in mixedCase
Parameter Pot.claimTicket(bytes32[],address[],uint256[])._epochs (Fund/Pot.sol#188) is not in mixedCase
Parameter Pot.claimFeeReward(bytes32,uint256[])._role (Fund/Pot.sol#205) is not in mixedCase
Parameter Pot.claimFeeReward(bytes32,uint256[])._epochsToClaim (Fund/Pot.sol#206) is not in mixedCase
Parameter Pot.handleChangeToEpochWait(bytes32,uint256)._role (Fund/Pot.sol#241) is not in mixedCase
Parameter Pot.handleChangeToEpochWait(bytes32,uint256)._currentEpoch (Fund/Pot.sol#241) is not in mixedCase
Parameter Pot.getMaxClaims(uint256,bytes32)._epoch (Fund/Pot.sol#264) is not in mixedCase
Parameter Pot.getMaxClaims(uint256,bytes32)._role (Fund/Pot.sol#265) is not in mixedCase
Parameter Pot.getPotValue(uint256,bytes32)._epoch (Fund/Pot.sol#272) is not in mixedCase
Parameter Pot.getPotValue(uint256,bytes32)._tokenId (Fund/Pot.sol#272) is not in mixedCase
Parameter Pot.getClaims(uint256,bytes32,address)._epoch (Fund/Pot.sol#276) is not in mixedCase
Parameter Pot.getClaims(uint256,bytes32,address)._role (Fund/Pot.sol#276) is not in mixedCase
Parameter Pot.getClaims(uint256,bytes32,address)._claimer (Fund/Pot.sol#276) is not in mixedCase
Parameter Pot.getRemainingClaims(uint256,bytes32)._epoch (Fund/Pot.sol#280) is not in mixedCase
Parameter Pot.getRemainingClaims(uint256,bytes32)._role (Fund/Pot.sol#280) is not in mixedCase
Variable Pot.MAX_INT (Fund/Pot.sol#12) is not in mixedCase
Variable Pot.GovernanceEnforcerProxy (Fund/Pot.sol#15) is not in mixedCase
Variable ERC20Mintable.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol#30) is not in mixedCase
Parameter Cluster.initialize(address,address)._LINToken (Actors/Cluster.sol#21) is not in mixedCase
Parameter Cluster.initialize(address,address)._clusterRegistry (Actors/Cluster.sol#21) is not in mixedCase
Parameter Cluster.register(uint256)._amountToStake (Actors/Cluster.sol#36) is not in mixedCase
Parameter Cluster.isRelayer(address)._receiver (Actors/Cluster.sol#41) is not in mixedCase
Variable Cluster.LINToken (Actors/Cluster.sol#18) is not in mixedCase
Contract Verifier_ProducerProxy (Ticket/Proxies/Verifier_ProducerProxy.sol#8-80) is not in CapWords
Parameter ClusterDefault.initialize(address)._admin (Actors/ClusterDefault.sol#16) is not in mixedCase
Parameter ClusterDefault.isRelayer(address)._receiver (Actors/ClusterDefault.sol#28) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._producerRegistry (Ticket/Verifier_Producer.sol#28) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._clusterRegistry (Ticket/Verifier_Producer.sol#29) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._luckManager (Ticket/Verifier_Producer.sol#30) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._pot (Ticket/Verifier_Producer.sol#31) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._fundManager (Ticket/Verifier_Producer.sol#32) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._producerRole (Ticket/Verifier_Producer.sol#33) is not in mixedCase
Parameter VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32)._tokenId (Ticket/Verifier_Producer.sol#34) is not in mixedCase
Parameter VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool)._blockHeader (Ticket/Verifier_Producer.sol#46) is not in mixedCase
Parameter VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool)._relayerSig (Ticket/Verifier_Producer.sol#47) is not in mixedCase
Parameter VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool)._producerSig (Ticket/Verifier_Producer.sol#48) is not in mixedCase
Parameter VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool)._cluster (Ticket/Verifier_Producer.sol#49) is not in mixedCase
Parameter VerifierProducer.verifyClaim(bytes,bytes,bytes,address,bool)._isAggregated (Ticket/Verifier_Producer.sol#50) is not in mixedCase
Parameter VerifierProducer.verifyClaims(bytes[],bytes[],bytes[],address[])._blockHeaders (Ticket/Verifier_Producer.sol#99) is not in mixedCase
Parameter VerifierProducer.verifyClaims(bytes[],bytes[],bytes[],address[])._relayerSigs (Ticket/Verifier_Producer.sol#100) is not in mixedCase
Parameter VerifierProducer.verifyClaims(bytes[],bytes[],bytes[],address[])._producerSigs (Ticket/Verifier_Producer.sol#101) is not in mixedCase
Parameter VerifierProducer.verifyClaims(bytes[],bytes[],bytes[],address[])._clusters (Ticket/Verifier_Producer.sol#102) is not in mixedCase
Constant Comp.totalSupply (governance/Comp.sol#15) is not in UPPER_CASE_WITH_UNDERSCORES
Contract Verifer_NetworkRewardProxy (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#8-80) is not in CapWords
Variable MinterRole.______gap (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#49) is not in mixedCase
Variable ERC20Detailed.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#56) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#6) is not in mixedCase
Contract Verifier_ReceiverProxy (Ticket/Proxies/Verifier_ReceiverProxy.sol#8-80) is not in CapWords
Variable ERC20.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#232) is not in mixedCase
Parameter Mintable.initialize(address)._tokenToBurn (LGT/Mintable.sol#13) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
GovernorAlpha.quorumVotes() (governance/GovernorAlpha.sol#9) uses literals with too many digits:
	- 400000e18 (governance/GovernorAlpha.sol#9)
GovernorAlpha.proposalThreshold() (governance/GovernorAlpha.sol#12) uses literals with too many digits:
	- 100000e18 (governance/GovernorAlpha.sol#12)
Comp.slitherConstructorConstantVariables() (governance/Comp.sol#4-301) uses literals with too many digits:
	- totalSupply = 10000000e18 (governance/Comp.sol#15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in VerifierReceiver (Ticket/Verifier_Receiver.sol#14-153)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Relayer (Actors/Relayer.sol#8-13)
ERC20.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#232) is never used in LGTLogic (LGT/LGTToken.sol#9-19)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in FundManager (Fund/FundManager.sol#10-264)
ERC20Burnable.______gap (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#30) is never used in TokenLogic (Token/TokenLogic.sol#10-25)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Producer (Actors/Producer.sol#6-56)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in LuckManager (Ticket/LuckManager.sol#9-175)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Verifier_NetworkReward (Ticket/Verifier_NetworkReward.sol#7-11)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in ClusterRegistry (Actors/ClusterRegistry.sol#10-133)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Pot (Fund/Pot.sol#9-283)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Cluster (Actors/Cluster.sol#14-48)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in ClusterDefault (Actors/ClusterDefault.sol#7-31)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in VerifierProducer (Ticket/Verifier_Producer.sol#15-161)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in Receiver (Actors/Receiver.sol#6-21)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
ClusterRegistry.GovernanceEnforcerProxy (Actors/ClusterRegistry.sol#16) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
initialize(address,address,address,address,address,bytes32,bytes32) should be declared external:
	- VerifierReceiver.initialize(address,address,address,address,address,bytes32,bytes32) (Ticket/Verifier_Receiver.sol#27-43)
verifyClaims(bytes[],bytes[],bytes[],address[]) should be declared external:
	- VerifierReceiver.verifyClaims(bytes[],bytes[],bytes[],address[]) (Ticket/Verifier_Receiver.sol#95-118)
propose(address[],uint256[],string[],bytes[],string) should be declared external:
	- GovernorAlpha.propose(address[],uint256[],string[],bytes[],string) (governance/GovernorAlpha.sol#136-174)
queue(uint256) should be declared external:
	- GovernorAlpha.queue(uint256) (governance/GovernorAlpha.sol#176-185)
execute(uint256) should be declared external:
	- GovernorAlpha.execute(uint256) (governance/GovernorAlpha.sol#192-200)
cancel(uint256) should be declared external:
	- GovernorAlpha.cancel(uint256) (governance/GovernorAlpha.sol#202-215)
getActions(uint256) should be declared external:
	- GovernorAlpha.getActions(uint256) (governance/GovernorAlpha.sol#217-220)
getReceipt(uint256,address) should be declared external:
	- GovernorAlpha.getReceipt(uint256,address) (governance/GovernorAlpha.sol#222-224)
castVote(uint256,bool) should be declared external:
	- GovernorAlpha.castVote(uint256,bool) (governance/GovernorAlpha.sol#248-250)
castVoteBySig(uint256,bool,uint8,bytes32,bytes32) should be declared external:
	- GovernorAlpha.castVoteBySig(uint256,bool,uint8,bytes32,bytes32) (governance/GovernorAlpha.sol#252-259)
__acceptAdmin() should be declared external:
	- GovernorAlpha.__acceptAdmin() (governance/GovernorAlpha.sol#281-284)
__abdicate() should be declared external:
	- GovernorAlpha.__abdicate() (governance/GovernorAlpha.sol#286-289)
__queueSetTimelockPendingAdmin(address,uint256) should be declared external:
	- GovernorAlpha.__queueSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#291-294)
__executeSetTimelockPendingAdmin(address,uint256) should be declared external:
	- GovernorAlpha.__executeSetTimelockPendingAdmin(address,uint256) (governance/GovernorAlpha.sol#296-299)
updateLogic(address) should be declared external:
	- ProducerProxy.updateLogic(address) (Actors/Proxies/ProducerProxy.sol#33-42)
isValidRelayer(address) should be declared external:
	- Relayer.isValidRelayer(address) (Actors/Relayer.sol#10-12)
initialize(string,string,uint8,address) should be declared external:
	- LGTLogic.initialize(string,string,uint8,address) (LGT/LGTToken.sol#10-18)
initialize(address,address) should be declared external:
	- FundManager.initialize(address,address) (Fund/FundManager.sol#48-52)
updateLINAllocation() should be declared external:
	- FundManager.updateLINAllocation() (Fund/FundManager.sol#64-71)
burn(uint256) should be declared external:
	- ERC20Burnable.burn(uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#19-21)
burnFrom(address,uint256) should be declared external:
	- ERC20Burnable.burnFrom(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol#26-28)
updateLogic(address) should be declared external:
	- LuckManagerProxy.updateLogic(address) (Ticket/Proxies/LuckManagerProxy.sol#33-42)
updateLogic(address) should be declared external:
	- ReceiverProxy.updateLogic(address) (Actors/Proxies/ReceiverProxy.sol#33-42)
updateLogic(address) should be declared external:
	- ClusterDefaultProxy.updateLogic(address) (Actors/Proxies/ClusterDefaultProxy.sol#33-42)
initialize() should be declared external:
	- Producer.initialize() (Actors/Producer.sol#14-18)
addProducer(address,bytes) should be declared external:
	- Producer.addProducer(address,bytes) (Actors/Producer.sol#20-25)
getProducer(bytes) should be declared external:
	- Producer.getProducer(bytes) (Actors/Producer.sol#32-34)
initialize(address,address,bytes32[],uint256[][]) should be declared external:
	- LuckManager.initialize(address,address,bytes32[],uint256[][]) (Ticket/LuckManager.sol#37-55)
initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256) should be declared external:
	- LuckManager.initializeLuckForRole(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256) (Ticket/LuckManager.sol#57-76)
changeLuckTrailingEpochs(bytes32,uint256) should be declared external:
	- LuckManager.changeLuckTrailingEpochs(bytes32,uint256) (Ticket/LuckManager.sol#131-138)
changeTargetClaims(bytes32,uint256) should be declared external:
	- LuckManager.changeTargetClaims(bytes32,uint256) (Ticket/LuckManager.sol#140-147)
changeAveragingEpochs(bytes32,uint256) should be declared external:
	- LuckManager.changeAveragingEpochs(bytes32,uint256) (Ticket/LuckManager.sol#149-156)
changeVarianceTolerance(bytes32,uint256) should be declared external:
	- LuckManager.changeVarianceTolerance(bytes32,uint256) (Ticket/LuckManager.sol#158-165)
changeChangeSteps(bytes32,uint256) should be declared external:
	- LuckManager.changeChangeSteps(bytes32,uint256) (Ticket/LuckManager.sol#167-174)
initialize() should be declared external:
	- Verifier_NetworkReward.initialize() (Ticket/Verifier_NetworkReward.sol#8-10)
initialize(address,uint256,uint256,address,address) should be declared external:
	- ClusterRegistry.initialize(address,uint256,uint256,address,address) (Actors/ClusterRegistry.sol#40-52)
openClusterRegistry() should be declared external:
	- ClusterRegistry.openClusterRegistry() (Actors/ClusterRegistry.sol#60-63)
closeClusterRegistry() should be declared external:
	- ClusterRegistry.closeClusterRegistry() (Actors/ClusterRegistry.sol#65-68)
addCluster(uint256) should be declared external:
	- ClusterRegistry.addCluster(uint256) (Actors/ClusterRegistry.sol#70-84)
proposeExit() should be declared external:
	- ClusterRegistry.proposeExit() (Actors/ClusterRegistry.sol#86-93)
exit() should be declared external:
	- ClusterRegistry.exit() (Actors/ClusterRegistry.sol#95-103)
getClusterStatus(address) should be declared external:
	- ClusterRegistry.getClusterStatus(address) (Actors/ClusterRegistry.sol#105-114)
changeClusterExitWaitEpochs(uint256) should be declared external:
	- ClusterRegistry.changeClusterExitWaitEpochs(uint256) (Actors/ClusterRegistry.sol#116-123)
changeMinStakeAmount(uint256) should be declared external:
	- ClusterRegistry.changeMinStakeAmount(uint256) (Actors/ClusterRegistry.sol#125-132)
updateLogic(address) should be declared external:
	- RelayerProxy.updateLogic(address) (Actors/Proxies/RelayerProxy.sol#33-42)
initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[]) should be declared external:
	- Pot.initialize(address,uint256,uint256,bytes32[],uint256[],bytes32[],address[],uint256[]) (Fund/Pot.sol#60-82)
addVerifier(address) should be declared external:
	- Pot.addVerifier(address) (Fund/Pot.sol#84-90)
removeVerifier(address) should be declared external:
	- Pot.removeVerifier(address) (Fund/Pot.sol#92-98)
updateSupportedTokenList(bytes32[],address[]) should be declared external:
	- Pot.updateSupportedTokenList(bytes32[],address[]) (Fund/Pot.sol#100-109)
changeEpochsToWaitForClaims(uint256,uint256,bytes32) should be declared external:
	- Pot.changeEpochsToWaitForClaims(uint256,uint256,bytes32) (Fund/Pot.sol#111-122)
changeEthBlocksPerEpoch(uint256) should be declared external:
	- Pot.changeEthBlocksPerEpoch(uint256) (Fund/Pot.sol#125-131)
allocatePot(bytes32[],uint256[]) should be declared external:
	- Pot.allocatePot(bytes32[],uint256[]) (Fund/Pot.sol#133-138)
addToPot(uint256[],address,bytes32,uint256[]) should be declared external:
	- Pot.addToPot(uint256[],address,bytes32,uint256[]) (Fund/Pot.sol#167-184)
claimTicket(bytes32[],address[],uint256[]) should be declared external:
	- Pot.claimTicket(bytes32[],address[],uint256[]) (Fund/Pot.sol#186-203)
claimFeeReward(bytes32,uint256[]) should be declared external:
	- Pot.claimFeeReward(bytes32,uint256[]) (Fund/Pot.sol#205-239)
getMaxClaims(uint256,bytes32) should be declared external:
	- Pot.getMaxClaims(uint256,bytes32) (Fund/Pot.sol#264-270)
getPotValue(uint256,bytes32) should be declared external:
	- Pot.getPotValue(uint256,bytes32) (Fund/Pot.sol#272-274)
getClaims(uint256,bytes32,address) should be declared external:
	- Pot.getClaims(uint256,bytes32,address) (Fund/Pot.sol#276-278)
getRemainingClaims(uint256,bytes32) should be declared external:
	- Pot.getRemainingClaims(uint256,bytes32) (Fund/Pot.sol#280-282)
mint(address,uint256) should be declared external:
	- ERC20Mintable.mint(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol#25-28)
initialize(address,address) should be declared external:
	- Cluster.initialize(address,address) (Actors/Cluster.sol#21-24)
joinCluster() should be declared external:
	- Cluster.joinCluster() (Actors/Cluster.sol#26-29)
exitCluster() should be declared external:
	- Cluster.exitCluster() (Actors/Cluster.sol#31-34)
register(uint256) should be declared external:
	- Cluster.register(uint256) (Actors/Cluster.sol#36-39)
isRelayer(address) should be declared external:
	- Cluster.isRelayer(address) (Actors/Cluster.sol#41-43)
getTotalRelayers() should be declared external:
	- Cluster.getTotalRelayers() (Actors/Cluster.sol#45-47)
updateLogic(address) should be declared external:
	- Verifier_ProducerProxy.updateLogic(address) (Ticket/Proxies/Verifier_ProducerProxy.sol#33-42)
updateLogic(address) should be declared external:
	- PotProxy.updateLogic(address) (Fund/Proxies/PotProxy.sol#33-42)
updateLogic(address) should be declared external:
	- ClusterProxy.updateLogic(address) (Actors/Proxies/ClusterProxy.sol#33-42)
initialize(address) should be declared external:
	- ClusterDefault.initialize(address) (Actors/ClusterDefault.sol#16-18)
addRelayer() should be declared external:
	- ClusterDefault.addRelayer() (Actors/ClusterDefault.sol#20-22)
removeRelayer() should be declared external:
	- ClusterDefault.removeRelayer() (Actors/ClusterDefault.sol#24-26)
isRelayer(address) should be declared external:
	- ClusterDefault.isRelayer(address) (Actors/ClusterDefault.sol#28-30)
initialize(address,address,address,address,address,bytes32,bytes32) should be declared external:
	- VerifierProducer.initialize(address,address,address,address,address,bytes32,bytes32) (Ticket/Verifier_Producer.sol#28-44)
verifyClaims(bytes[],bytes[],bytes[],address[]) should be declared external:
	- VerifierProducer.verifyClaims(bytes[],bytes[],bytes[],address[]) (Ticket/Verifier_Producer.sol#99-122)
updateLogic(address) should be declared external:
	- FundManagerProxy.updateLogic(address) (Fund/Proxies/FundManagerProxy.sol#33-42)
delegate(address) should be declared external:
	- Comp.delegate(address) (governance/Comp.sol#148-150)
delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) should be declared external:
	- Comp.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (governance/Comp.sol#161-170)
getPriorVotes(address,uint256) should be declared external:
	- Comp.getPriorVotes(address,uint256) (governance/Comp.sol#189-221)
updateLogic(address) should be declared external:
	- Verifer_NetworkRewardProxy.updateLogic(address) (Ticket/Proxies/Verifier_NetworkRewardProxy.sol#33-42)
setDelay(uint256) should be declared external:
	- Timelock.setDelay(uint256) (governance/Timelock.sol#36-43)
acceptAdmin() should be declared external:
	- Timelock.acceptAdmin() (governance/Timelock.sol#45-51)
setPendingAdmin(address) should be declared external:
	- Timelock.setPendingAdmin(address) (governance/Timelock.sol#53-58)
queueTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.queueTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#60-69)
cancelTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.cancelTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#71-78)
executeTransaction(address,uint256,string,bytes,uint256) should be declared external:
	- Timelock.executeTransaction(address,uint256,string,bytes,uint256) (governance/Timelock.sol#80-105)
addMinter(address) should be declared external:
	- MinterRole.addMinter(address) (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#31-33)
renounceMinter() should be declared external:
	- MinterRole.renounceMinter() (@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol#35-37)
updateLogic(address) should be declared external:
	- ClusterRegistryProxy.updateLogic(address) (Actors/Proxies/ClusterRegistryProxy.sol#33-42)
isValidReceiver(address) should be declared external:
	- Receiver.isValidReceiver(address) (Actors/Receiver.sol#14-16)
getTotalReceivers() should be declared external:
	- Receiver.getTotalReceivers() (Actors/Receiver.sol#18-20)
updateLogic(address) should be declared external:
	- TokenProxy.updateLogic(address) (Token/TokenProxy.sol#33-42)
name() should be declared external:
	- ERC20Detailed.name() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#28-30)
symbol() should be declared external:
	- ERC20Detailed.symbol() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#36-38)
decimals() should be declared external:
	- ERC20Detailed.decimals() (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol#52-54)
setCompleted(uint256) should be declared external:
	- Migrations.setCompleted(uint256) (Migrations.sol#16-18)
updateLogic(address) should be declared external:
	- LGTProxy.updateLogic(address) (LGT/LGTProxy.sol#33-42)
updateLogic(address) should be declared external:
	- Verifier_ReceiverProxy.updateLogic(address) (Ticket/Proxies/Verifier_ReceiverProxy.sol#33-42)
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#51-53)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#63-66)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#71-73)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#82-85)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#99-103)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#117-120)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol#136-139)
mint(uint256) should be declared external:
	- Mintable.mint(uint256) (LGT/Mintable.sol#19-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Slither:. analyzed (48 contracts with 46 detectors), 464 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
