{
	"schemaVersion": "2.0.0",
	"contractName": "Curve",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "x",
						"type": "uint256"
					},
					{
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "curve",
				"outputs": [
					{
						"name": "y",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {}
	},
	"sourceTreeHashHex": "0x27e7582bca60add8d57747e46945f08152d6a5db530358be80fd850e1d160137",
	"sources": {
		"./Curve.sol": {
			"id": 0
		}
	},
	"sourceCodes": {
		"./Curve.sol": "pragma solidity >=0.4.21 <0.7.0;\n\n\ncontract Curve {\n    // y=41.13 * 10^-54 * (x-10^27)^2 + 85.7\n\n    function multiply(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Multiply overflow check\");\n        return c;\n    }\n\n    function divide(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Divide by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Addition Overflow check\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Subtraction overflow check\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function curve(uint256 x, uint256 amount) public pure returns (uint256 y) {\n        require(x >= 10**27, \"Tokens should be more than or equal to 1 billion\");\n        uint256 _temp = add(x, amount);\n        _temp = sub(_temp, 10**27);\n        _temp = multiply(_temp, _temp);\n        _temp = multiply(_temp, 4113*(10**10));\n        _temp = divide(_temp, 10**54);\n        _temp = add(_temp, 8570*(10**10));\n        _temp = multiply(_temp, amount);\n        y = divide(_temp, 10**12);\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.0+commit.1d4f565a",
		"settings": {
			"remappings": [
				"@openzeppelin/upgrades=/home/app/node_modules/@openzeppelin/upgrades",
				"@openzeppelin/contracts-ethereum-package=/home/app/node_modules/@openzeppelin/contracts-ethereum-package"
			],
			"optimizer": {
				"enabled": false
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi"
					]
				}
			}
		}
	},
	"chains": {}
}