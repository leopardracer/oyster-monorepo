{
	"schemaVersion": "2.0.0",
	"contractName": "CapacityProxy",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newLogic",
						"type": "address"
					}
				],
				"name": "updateLogic",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "contractLogic",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5060405160208061037b8339810180604052602081101561003057600080fd5b81019080805190602001909291905050506000600160405180807f656970313936372e70726f78792e696d706c656d656e746174696f6e00000000815250601c019050604051809103902060019004036001029050818155600160405180807f656970313936372e70726f78792e61646d696e0000000000000000000000000081525060130190506040518091039020600190040360010290506000339050808255505050610297806100e46000396000f3fe608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063795e617e146100b2575b6000600160405180807f656970313936372e70726f78792e696d706c656d656e746174696f6e00000000815250601c01905060405180910390206001900403600102905080543660008037600080366000846127105a03f43d806000803e81600081146100ad57816000f35b816000fd5b3480156100be57600080fd5b50610101600480360360208110156100d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610103565b005b61010b61021e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f4f6e6c792041646d696e2073686f756c642062652061626c6520746f2075706481526020017f6174652074686520636f6e74726163747300000000000000000000000000000081525060400191505060405180910390fd5b6000600160405180807f656970313936372e70726f78792e696d706c656d656e746174696f6e00000000815250601c0190506040518091039020600190040360010290508181555050565b600080600160405180807f656970313936372e70726f78792e61646d696e00000000000000000000000000815250601301905060405180910390206001900403600102905080549150509056fea165627a7a723058205e43807fd6690f4a87d7e4a1fd33313b3359fb1f7995caeae3175e1f04d0f6460029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH2 0x37B DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x656970313936372E70726F78792E696D706C656D656E746174696F6E00000000 DUP2 MSTORE POP PUSH1 0x1C ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SUB PUSH1 0x1 MUL SWAP1 POP DUP2 DUP2 SSTORE PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x656970313936372E70726F78792E61646D696E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x13 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SUB PUSH1 0x1 MUL SWAP1 POP PUSH1 0x0 CALLER SWAP1 POP DUP1 DUP3 SSTORE POP POP POP PUSH2 0x297 DUP1 PUSH2 0xE4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x795E617E EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x656970313936372E70726F78792E696D706C656D656E746174696F6E00000000 DUP2 MSTORE POP PUSH1 0x1C ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SUB PUSH1 0x1 MUL SWAP1 POP DUP1 SLOAD CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 PUSH2 0x2710 GAS SUB DELEGATECALL RETURNDATASIZE DUP1 PUSH1 0x0 DUP1 RETURNDATACOPY DUP2 PUSH1 0x0 DUP2 EQ PUSH2 0xAD JUMPI DUP2 PUSH1 0x0 RETURN JUMPDEST DUP2 PUSH1 0x0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x103 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10B PUSH2 0x21E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792041646D696E2073686F756C642062652061626C6520746F20757064 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6174652074686520636F6E747261637473000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x656970313936372E70726F78792E696D706C656D656E746174696F6E00000000 DUP2 MSTORE POP PUSH1 0x1C ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SUB PUSH1 0x1 MUL SWAP1 POP DUP2 DUP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x656970313936372E70726F78792E61646D696E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x13 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SUB PUSH1 0x1 MUL SWAP1 POP DUP1 SLOAD SWAP2 POP POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0x5e NUMBER DUP1 PUSH32 0xD6690F4A87D7E4A1FD33313B3359FB1F7995CAEAE3175E1F04D0F64600290000 ",
				"sourceMap": "246:2144:1:-;;;526:359;8:9:-1;5:2;;;30:1;27;20:12;5:2;526:359:1;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;526:359:1;;;;;;;;;;;;;;;;611:12;393:1;348:41;;;;;;;;;;;;;;;;;;;340:50;;;:54;323:77;;611:34;;691:13;685:4;678:27;512:1;476:32;;;;;;;;;;;;;;;;;;;468:41;;;:45;451:68;;756:23;;789:14;806:10;789:27;;862:6;856:4;849:20;835:44;;;246:2144;;;;;;"
			}
		}
	},
	"sources": {
		"Capacity/CapacityProxy.sol": {
			"id": 1
		}
	},
	"sourceCodes": {
		"Capacity/CapacityProxy.sol": "pragma solidity >=0.4.21 <0.7.0;\n\n\n/// @title Contract to reward overlapping stakes\n/// @author Marlin\n/// @notice Use this contract only for testing\n/// @dev Contract may or may not change in future (depending upon the new slots in proxy-store)\ncontract CapacityProxy {\n    bytes32 internal constant IMPLEMENTATION_SLOT = bytes32(\n        uint256(keccak256(\"eip1967.proxy.implementation\")) - 1\n    );\n    bytes32 internal constant PROXY_ADMIN_SLOT = bytes32(\n        uint256(keccak256(\"eip1967.proxy.admin\")) - 1\n    );\n\n    constructor(address contractLogic) public {\n        // save the code address\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, contractLogic)\n        }\n        // save the proxy admin\n        slot = PROXY_ADMIN_SLOT;\n        address sender = msg.sender;\n        assembly {\n            sstore(slot, sender)\n        }\n    }\n\n    /// @author Marlin\n    /// @dev Only admin can update the contract\n    /// @param _newLogic address is the address of the contract that has to updated to\n    function updateLogic(address _newLogic) public {\n        require(\n            msg.sender == getAdmin(),\n            \"Only Admin should be able to update the contracts\"\n        );\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, _newLogic)\n        }\n    }\n\n    /// @author Marlin\n    /// @dev use assembly as contract store slot is manually decided\n    function getAdmin() internal view returns (address result) {\n        bytes32 slot = PROXY_ADMIN_SLOT;\n        assembly {\n            result := sload(slot)\n        }\n    }\n\n    /// @author Marlin\n    /// @dev add functionality to forward the balance as well.\n    function() external payable {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            let contractLogic := sload(slot)\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(\n                sub(gas(), 10000),\n                contractLogic,\n                0x0,\n                calldatasize(),\n                0,\n                0\n            )\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n\n            switch success\n                case 0 {\n                    revert(0, retSz)\n                }\n                default {\n                    return(0, retSz)\n                }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x21404fa55f6797ebe6ddc8385b837a4814f36262aa9c7e04b5efe9899e39732d",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.0+commit.1d4f565a.js",
		"settings": {
			"optimizer": {
				"enabled": false
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"remappings": [
				"@openzeppelin/upgrades=/home/app/node_modules/@openzeppelin/upgrades",
				"@openzeppelin/contracts-ethereum-package=/home/app/node_modules/@openzeppelin/contracts-ethereum-package",
				"solidity-bytes-utils=/home/app/node_modules/solidity-bytes-utils"
			]
		}
	},
	"chains": {}
}